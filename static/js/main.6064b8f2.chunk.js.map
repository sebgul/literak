{"version":3,"sources":["Word.js","Board.js","wordSets.js","App.js","index.js"],"names":["StyledAnswer","Styled","li","Word","word","goToNextWord","guessed","correct","gap","answers","map","answer","id","onClick","document","getElementsByTagName","forEach","style","pointerEvents","cursor","setTimeout","color","StyledScore","div","Board","words","useState","currentCount","setCurrentCount","msg","setMsg","setWord","score","setScore","wrong","setWrong","slice","replace","getElementById","correctAns","filter","ans","length","set01","App","className","ReactDOM","render","StrictMode"],"mappings":"sPAEMA,EAAeC,IAAOC,GAAV,+VAqDHC,EArCF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAejB,OACI,gCACKD,EAAKE,QACA,+BAAOF,EAAKG,UACZ,+BAAOH,EAAKI,MAElB,6BAEQJ,EAAKK,QAAQC,KAAI,SAAAC,GAAM,OACnB,cAACX,EAAD,CAAcY,GAAID,EAEJE,QAAS,WAxBvC,YAAIC,SAASC,qBAAqB,OAAOC,SAAQ,SAAAd,GAC7CA,EAAGe,MAAMC,cAAgB,OACzBhB,EAAGe,MAAME,OAAS,aAEtBC,YAAW,WACP,YAAIN,SAASC,qBAAqB,OAAOC,SAAQ,SAAAd,GAC7CA,EAAGe,MAAMC,cAAgB,OACzBhB,EAAGe,MAAME,OAAS,UAClBjB,EAAGe,MAAMI,MAAQ,aAEtB,MAgB+BhB,EAAaM,IAJ/B,SAMEA,GALiBA,YCvCrCW,EAAcrB,IAAOsB,IAAV,gEAsDFC,EAlDD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACmBC,mBAAS,GAD5B,mBACdC,EADc,KACAC,EADA,OAECF,mBAAS,wDAFV,mBAEdG,EAFc,KAETC,EAFS,OAGGJ,mBAAS,2BAAID,EAAM,IAAX,IAAenB,SAAS,KAHnC,mBAGdF,EAHc,KAGR2B,EAHQ,OAIKL,mBAAS,GAJd,mBAIdM,EAJc,KAIPC,EAJO,OAKKP,mBAAS,GALd,mBAKdQ,EALc,KAKPC,EALO,KAqCnB,OACI,gCACI,8BAAM,cAAC,EAAD,CAAM/B,KAAMA,EAAMC,aAhCX,SAACM,GAClB,GAAIP,EAAKI,IAAI4B,QAAQC,QAAQ,IAAK1B,KAAYP,EAAKG,QAC/CO,SAASwB,eAAe3B,GAAQM,MAAMI,MAAQ,SAC9CU,EAAQ,2BAAI3B,GAAL,IAAWE,SAAS,KAC3B2B,IAAWD,GACXF,EAAO,2DACJ,CACH,IAAIS,EAAanC,EAAKK,QAAQ+B,QAAO,SAAAC,GAAG,OAAIrC,EAAKI,IAAI4B,QAAQC,QAAQ,IAAKI,KAASrC,EAAKG,WACxFO,SAASwB,eAAe3B,GAAQM,MAAMI,MAAQ,MAC9CP,SAASwB,eAAeC,GAAYtB,MAAMI,MAAQ,SAClDc,IAAWD,GACXJ,EAAO,oDAGXV,YAAW,WACPU,EAAO,wDAEHH,EAAeF,EAAMiB,OAAS,GAC9BX,EAAQ,2BAAIN,EAAME,EAAe,IAA1B,IAA8BrB,SAAS,KAC9CsB,IAAkBD,KAElBI,EAAQ,2BAAIN,EAAM,IAAX,IAAenB,SAAS,KAC/BsB,EAAgB,GAChBK,EAAS,GACTE,EAAS,MAGd,WAMEV,EAAMiB,OAASV,EAAQE,IAAU,EAC5B,eAACZ,EAAD,qBAAqBU,EAArB,IAA6BP,EAAMiB,OAAnC,qBAAwDjB,EAAMiB,OAASV,EAAQE,EAA/E,OACA,eAACZ,EAAD,kCAA6BU,EAA7B,IAAqCP,EAAMiB,UAEhDb,MCpDJc,EAAQ,CACjB,CACI,QAAW,cACX,IAAO,QACP,QAAW,CACP,UACA,KACA,SACA,WAGR,CACI,QAAW,qBACX,IAAO,gBACP,QAAW,CACP,UACA,SACA,SACA,QCJGC,MAVf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,cAAC,EAAD,CAAOpB,MAAOkB,SCH9BG,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJlC,SAASwB,eAAe,W","file":"static/js/main.6064b8f2.chunk.js","sourcesContent":["import Styled from \"styled-components\";\r\n\r\nconst StyledAnswer = Styled.li`\r\n    width: 5rem;\r\n    padding-left: 2rem;\r\n    padding-right: 2rem;\r\n    padding-top: 0.5rem;\r\n    padding-bottom: 0.5rem;\r\n    margin: 0.5rem;\r\n    margin-right: 5rem;\r\n    background-color: green;\r\n    listStyleType: none;\r\n    display: inline;\r\n    border-radius: 2rem;\r\n    pointer-events: auto;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Word = ({word, goToNextWord}) => {\r\n    const blockClicking = () => {\r\n        [...document.getElementsByTagName(\"li\")].forEach(li => {\r\n            li.style.pointerEvents = \"none\";\r\n            li.style.cursor = \"default\";\r\n        });\r\n        setTimeout(() => {\r\n            [...document.getElementsByTagName(\"li\")].forEach(li => {\r\n                li.style.pointerEvents = \"auto\";\r\n                li.style.cursor = \"pointer\";\r\n                li.style.color = \"white\";\r\n            });\r\n        }, 2500);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {word.guessed\r\n                ? <span>{word.correct}</span>\r\n                : <span>{word.gap}</span>\r\n            }\r\n            <ul>\r\n                {\r\n                    word.answers.map(answer => (\r\n                        <StyledAnswer id={answer}\r\n                                      key={answer}\r\n                                      onClick={() => {\r\n                                          blockClicking();\r\n                                          goToNextWord(answer);\r\n                                      }}\r\n                        >{answer}</StyledAnswer>))\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Word;\r\n","import Word from \"./Word\";\r\nimport {useState} from \"react\";\r\nimport Styled from \"styled-components\";\r\n\r\nconst StyledScore = Styled.div`\r\n    font-size: calc(1rem + 2vmin);\r\n`;\r\n\r\nconst Board = ({words}) => {\r\n        let [currentCount, setCurrentCount] = useState(0);\r\n        let [msg, setMsg] = useState(<div>Zgadnij &#128512;</div>);\r\n        let [word, setWord] = useState({...words[0], guessed: false});\r\n        let [score, setScore] = useState(0);\r\n        let [wrong, setWrong] = useState(0);\r\n\r\n        const goToNextWord = (answer) => {\r\n            if (word.gap.slice().replace(\"_\", answer) === word.correct) {\r\n                document.getElementById(answer).style.color = \"yellow\";\r\n                setWord({...word, guessed: true});\r\n                setScore(++score);\r\n                setMsg(<div>Dobrze &#128077;</div>)\r\n            } else {\r\n                let correctAns = word.answers.filter(ans => word.gap.slice().replace(\"_\", ans) === word.correct);\r\n                document.getElementById(answer).style.color = \"red\";\r\n                document.getElementById(correctAns).style.color = \"yellow\";\r\n                setWrong(++wrong);\r\n                setMsg(<div>Ups &#128579;</div>)\r\n            }\r\n\r\n            setTimeout(() => {\r\n                setMsg(<div>Zgadnij &#128512;</div>);\r\n\r\n                if (currentCount < words.length - 1) {\r\n                    setWord({...words[currentCount + 1], guessed: false});\r\n                    setCurrentCount(++currentCount);\r\n                } else {\r\n                    setWord({...words[0], guessed: false});\r\n                    setCurrentCount(0);\r\n                    setScore(0);\r\n                    setWrong(0);\r\n                }\r\n\r\n            }, 2500);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div>{<Word word={word} goToNextWord={goToNextWord}/>}</div>\r\n                {words.length - score - wrong !== 0\r\n                    ? <StyledScore>Wynik: {score}/{words.length} (pozostało: {words.length - score - wrong})</StyledScore>\r\n                    : <StyledScore>Wynik końcowy: {score}/{words.length}</StyledScore>\r\n                }\r\n                {msg}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Board;\r\n","export const set01 = [\r\n    {\r\n        \"correct\": \"dźwigi\",\r\n        \"gap\": \"_wigi\",\r\n        \"answers\": [\r\n            \"dź\",\r\n            \"dz\",\r\n            \"ź\",\r\n            \"ś\"\r\n        ]\r\n    },\r\n    {\r\n        \"correct\": \"koźlątko\",\r\n        \"gap\": \"ko_lątko\",\r\n        \"answers\": [\r\n            \"dź\",\r\n            \"ś\",\r\n            \"ź\",\r\n            \"dz\"\r\n        ]\r\n    }\r\n];\r\n","import './App.css';\r\nimport Board from \"./Board\";\r\nimport {set01} from \"./wordSets\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <Board words={set01}/>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}